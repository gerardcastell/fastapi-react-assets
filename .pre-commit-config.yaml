# Pre-commit configuration for monorepo (FastAPI + React)
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
repos:
  # General hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # File checks
      - id: trailing-whitespace
        description: Remove trailing whitespace
      - id: end-of-file-fixer
        description: Ensure files end with a newline
      - id: check-yaml
        description: Check YAML syntax
        args: ['--unsafe'] # Allow custom YAML tags
      - id: check-json
        description: Check JSON syntax
      - id: check-toml
        description: Check TOML syntax
      - id: check-xml
        description: Check XML syntax
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: check-case-conflict
        description: Check for case conflicts in filenames
      - id: check-added-large-files
        description: Prevent large files from being committed
        args: ['--maxkb=1000'] # 1MB limit

      # Security checks
      - id: detect-private-key
        description: Detect private keys in files

      # Git hooks
      - id: check-merge-conflict
        description: Check for merge conflict markers
      - id: mixed-line-ending
        description: Ensure consistent line endings
        args: ['--fix=lf'] # Use LF line endings

      # Documentation
      - id: check-docstring-first
        description: Check that docstrings are at the top of files

  # Python-specific hooks (backend only)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.14.1
    hooks:
      - id: ruff
        description: Run Ruff linter
        args: [--fix]
        files: ^backend/
      - id: ruff-format
        description: Run Ruff formatter
        files: ^backend/

  # Type checking (backend only)
  - repo: local
    hooks:
      - id: mypy
        name: mypy
        entry: bash -c 'cd backend && mypy --config-file=pyproject.toml --explicit-package-bases .'
        language: system
        types: [python]
        files: ^backend/
        pass_filenames: false
        require_serial: true

  # Testing (backend only)
  - repo: local
    hooks:
      - id: pytest
        name: pytest
        entry: bash -c 'cd backend && uv run pytest tests/ -v'
        language: system
        types: [python]
        files: ^backend/
        pass_filenames: false
        require_serial: true

  # Frontend hooks
  - repo: local
    hooks:
      - id: eslint
        name: ESLint
        entry: bash -c 'cd frontend && npm run lint:fix'
        language: system
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        pass_filenames: false
      - id: prettier
        name: Prettier
        entry: bash -c 'cd frontend && npm run format'
        language: system
        files: ^frontend/
        pass_filenames: false

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v4.9.1
    hooks:
      - id: commitizen
        description: Check commit message format
        stages: [commit-msg]

# Configuration
default_install_hook_types: [pre-commit, pre-push]
default_stages: [pre-commit]
fail_fast: true
minimum_pre_commit_version: '3.0.0'
